# -*- coding: utf-8 -*-
"""task4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14MaZ_sFsf_iEwaloxKNc3Bie9NsXjp1a
"""

from queue import PriorityQueue

class grh:
    def __init__(self, v):
        self.v = v
        self.ed = [[-1 for m in range(v)] for n in range(v)]
        self.lis = []

    def e1(self, x, y, w): 
        self.ed[x][y] = w
        self.ed[y][x] = w

    def Dijkstra(self, first):
        c = {v:float('inf') for v in range(self.v)}
        c2=0
        c[first] = c2
        
        qu = PriorityQueue()
        p1=(0, first)
        qu.put(p1)
    
        while not qu.empty():
            qu1=qu.get()
            (dt, now) = qu1
            self.lis.append(now)
    
            for p in range(self.v):
                op1=-1
                if self.ed[now][p] != op1:      
                    dt1 = self.ed[now][p]
                    if p not in self.lis:
                
                        now1 = c[p]
                      
                        now2 = dt1+ c[now]
                        if now1 > now2:
                            qu1=(now2,p)
                            qu.put(qu1)
                            c[p] = now
        return c

grh1 = grh(14)
grh1.e1(0,1,3)
grh1.e1(1, 2, 4)
grh1.e1(1,8, 6)
grh1.e1(2,3, 2)
grh1.e1(8,9, 5)
grh1.e1(2,3,7)
grh1.e1(3,6,7)
grh1.e1(3,4,3)
grh1.e1(4,5,1)
grh1.e1(6,7,2)
grh1.e1(6,13,4)
grh1.e1(7,8,3)
grh1.e1(7,10,1)
grh1.e1(9,10,7)
grh1.e1(10,11,6)
grh1.e1(11,12,4)
grh1.e1(11,13,7)
grh1.e1(12,13,2)

c2 = grh1
c=c2.Dijkstra(0)
grh2 = ['Motijheel','A','B','C','D','E','F','G','H','I','J','K','L',"MOGHBAZAR"]
z2 = 2-1
z=z2-1
lis2 = {}

for s, n in c.items():
    lis2[grh2[z]] = n+0
    z += 1
print(lis2)

s1 = open('output4.txt', mode='w')

for place, dt in lis2.items():
    s1.write(f"From Motijheel to {place} : {dt}\n")


#e cannot use BFS in this situation as we know BFS determines and works for unweighted graph and dijkstra works for weighted graph and here, weighted graph is given. Moreover, BFS leaves some nodes if there is not necessary to reach but dijkstra goes all nodes and here, it is necessary to go all nodes to find a better way. So, BFS is not used here.